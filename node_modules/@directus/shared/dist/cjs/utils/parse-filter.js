"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseFilter = void 0;
const constants_1 = require("../constants");
const to_array_1 = require("./to-array");
const adjust_date_1 = require("./adjust-date");
const deep_map_1 = require("./deep-map");
const is_dynamic_variable_1 = require("./is-dynamic-variable");
const flatten_arrays_1 = require("./flatten-arrays");
function parseFilter(filter, accountability, context = {}) {
    if (!filter)
        return filter;
    return (0, flatten_arrays_1.flattenArrays)((0, deep_map_1.deepMap)(filter, applyFilter));
    function applyFilter(val, key) {
        var _a, _b, _c;
        if (val === 'true')
            return true;
        if (val === 'false')
            return false;
        if (val === 'null' || val === 'NULL')
            return null;
        if (['_in', '_nin', '_between', '_nbetween'].includes(String(key))) {
            if (typeof val === 'string' && val.includes(','))
                return (0, deep_map_1.deepMap)(val.split(','), applyFilter);
            else
                return (0, deep_map_1.deepMap)((0, to_array_1.toArray)(val), applyFilter);
        }
        if ((0, is_dynamic_variable_1.isDynamicVariable)(val)) {
            if (val.startsWith('$NOW')) {
                if (val.includes('(') && val.includes(')')) {
                    const adjustment = (_a = val.match(constants_1.REGEX_BETWEEN_PARENS)) === null || _a === void 0 ? void 0 : _a[1];
                    if (!adjustment)
                        return new Date();
                    return (0, adjust_date_1.adjustDate)(new Date(), adjustment);
                }
                return new Date();
            }
            if (val.startsWith('$CURRENT_USER')) {
                if (val === '$CURRENT_USER')
                    return (_b = accountability === null || accountability === void 0 ? void 0 : accountability.user) !== null && _b !== void 0 ? _b : null;
                return get(context, val, null);
            }
            if (val.startsWith('$CURRENT_ROLE')) {
                if (val === '$CURRENT_ROLE')
                    return (_c = accountability === null || accountability === void 0 ? void 0 : accountability.role) !== null && _c !== void 0 ? _c : null;
                return get(context, val, null);
            }
        }
        return val;
    }
}
exports.parseFilter = parseFilter;
function get(obj, path, defaultValue) {
    const pathParts = path.split('.');
    let val = obj;
    while (pathParts.length) {
        const key = pathParts.shift();
        if (key) {
            val = processLevel(val, key);
        }
    }
    return val || defaultValue;
    function processLevel(value, key) {
        if (Array.isArray(value)) {
            return value.map((subVal) => subVal[key]);
        }
        else if (value && typeof value === 'object') {
            return value[key];
        }
    }
}
